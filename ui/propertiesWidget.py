# Partially generated by Qt Designer.
# Functions for data updates and widget removal have been added.

from PySide6.QtCore import QSize, Signal
from PySide6.QtGui import QDoubleValidator, QIntValidator
from PySide6.QtWidgets import QHBoxLayout, QLabel, QLineEdit,QPushButton, QTextEdit, QSizePolicy, QSpacerItem, QVBoxLayout, QWidget
from logic.utils import get_key_name

time_validator = QDoubleValidator(0.0, 10080.0, 2,)  
time_validator.setNotation(QDoubleValidator.StandardNotation)
repeat_number_validator = QIntValidator(0,999)

class PropertiesKey(QWidget):

    removalRequested = Signal()
    properties_updated = Signal(str, str)

    def __init__(self, key, time, parent=None):
        super().__init__(parent)
        self.key = key
        self.user_input_key_flag = False

        self.time = time
        self.listening = False
        self.init_properties_key()
        
        print(f"游릴游릴游릴   {self.key}")

    def init_properties_key(self):

        self.resize(300, 300)
        self.setMinimumSize(QSize(300, 300))
        self.setMaximumWidth(300)

        self.horizontalLayout = QHBoxLayout(self)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)


        # H spacer main
        self.horizontalLayout.addItem(QSpacerItem(20, 20, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))

        self.widget_content = QWidget(self)
        self.verticalLayout = QVBoxLayout(self.widget_content)
        self.verticalLayout.setSpacing(10)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)

        self.verticalLayout.addItem(QSpacerItem(0, 10, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))

        # -------------- widget key container --------------
        self.widget_key_container = QWidget(self.widget_content)
        self.widget_key_container.setMaximumSize(QSize(16777215, 50))
        self.horizontalLayout_2 = QHBoxLayout(self.widget_key_container)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)

        # label key
        self.widget_label_key = QWidget(self.widget_key_container)
        self.widget_label_key.setFixedSize(QSize(60, 30))
        self.horizontalLayout_3 = QHBoxLayout(self.widget_label_key)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.label_key = QLabel("Key: ", self.widget_label_key)

        self.horizontalLayout_3.addWidget(self.label_key)

        # spacer (widget key container)
        self.horizontalLayout_3.addItem(QSpacerItem(40, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.horizontalLayout_2.addWidget(self.widget_label_key)

        # label user key
        self.label_user_key = QLabel(self.key, self.widget_key_container)
        self.label_user_key.setFixedSize(QSize(90, 30))
        self.horizontalLayout_2.addWidget(self.label_user_key)

        # spacer (widget key container)
        self.horizontalLayout_2.addItem(QSpacerItem(40, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        # pushButton get key ####################################################################################################################
        self.button_properties_key = QPushButton("Set", self)
        self.button_properties_key.setFixedSize(QSize(80, 40))
        self.button_properties_key.setStyleSheet("background: #262626;")
        self.button_properties_key.clicked.connect(self.start_listening)
        self.horizontalLayout_2.addWidget(self.button_properties_key)

        self.verticalLayout.addWidget(self.widget_key_container)

        # -------------- widget time container --------------
        self.widget_time_container = QWidget(self.widget_content)
        self.widget_time_container.setMaximumSize(QSize(16777215, 50))
        self.horizontalLayout_4 = QHBoxLayout(self.widget_time_container)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)

        # label time
        self.widget_label_time = QWidget(self.widget_time_container)
        self.widget_label_time.setFixedSize(QSize(60, 30))

        self.horizontalLayout_5 = QHBoxLayout(self.widget_label_time)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)

        self.label_time = QLabel("Time: ", self.widget_label_time)
        self.horizontalLayout_5.addWidget(self.label_time)

        # spacer (widget time container)
        self.horizontalLayout_5.addItem(QSpacerItem(40, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.horizontalLayout_4.addWidget(self.widget_label_time)

        # lineEdit time
        
        self.lineEdit_time = QLineEdit(self.time, self.widget_time_container)
        self.lineEdit_time.setFixedSize(QSize(90, 30))
        self.lineEdit_time.setStyleSheet("background: #262626;")
        self.lineEdit_time.setValidator(time_validator)
        self.horizontalLayout_4.addWidget(self.lineEdit_time)
        self.lineEdit_time.editingFinished.connect(self.update_properties)

        # spacer (widget time container)
        self.horizontalLayout_4.addItem(QSpacerItem(40, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.verticalLayout.addWidget(self.widget_time_container)

        # V spacer (widget_content)
        self.verticalLayout.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding))


        self.horizontalLayout.addWidget(self.widget_content)

        # H spacer main
        self.horizontalLayout.addItem(QSpacerItem(20, 0, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))

    def update_properties(self):
        print(f"游릳游릴游릳游릴游릳游릴   {self.key}")
        self.properties_updated.emit(
            self.key,
            self.lineEdit_time.text())
        
    def start_listening(self):
        self.listening = True
        self.grabKeyboard()

    def keyPressEvent(self, event):
        if self.listening:
            print("游릳游릴")
            self.user_input_key_flag = True
            scancode = event.nativeScanCode()
            self.releaseKeyboard()

            self.listening = False
            self.key = str(get_key_name(scancode))

            self.label_user_key.setText(self.key)
            self.update_properties()
        else:
            super().keyPressEvent(event)

class PropertiesWait(QWidget):

    removalRequested = Signal()
    properties_updated = Signal(str)

    def __init__(self, time, parent=None):
        super().__init__(parent)
        self.time = time
        self.init_properties_key()

    def init_properties_key(self):

        self.resize(300, 300)
        self.setMinimumSize(QSize(300, 300))
        self.setMaximumWidth(300)

        self.horizontalLayout = QHBoxLayout(self)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)


        # H spacer main
        self.horizontalLayout.addItem(QSpacerItem(20, 20, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))

        self.widget_content = QWidget(self)
        self.verticalLayout = QVBoxLayout(self.widget_content)
        self.verticalLayout.setSpacing(10)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)

        self.verticalLayout.addItem(QSpacerItem(0, 10, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))

        # -------------- widget time container --------------
        self.widget_time_container = QWidget(self.widget_content)
        self.widget_time_container.setMaximumSize(QSize(16777215, 50))
        self.horizontalLayout_4 = QHBoxLayout(self.widget_time_container)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)

        # label time
        self.widget_label_time = QWidget(self.widget_time_container)
        self.widget_label_time.setFixedSize(QSize(60, 30))

        self.horizontalLayout_5 = QHBoxLayout(self.widget_label_time)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)

        self.label_time = QLabel("Time: ", self.widget_label_time)
        self.horizontalLayout_5.addWidget(self.label_time)

        # spacer (widget time container)
        self.horizontalLayout_5.addItem(QSpacerItem(40, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.horizontalLayout_4.addWidget(self.widget_label_time)

        # lineEdit time
        self.lineEdit_time = QLineEdit(self.time, self.widget_time_container)
        self.lineEdit_time.setFixedSize(QSize(90, 30))
        self.lineEdit_time.setStyleSheet("background: #262626;")
        self.lineEdit_time.setValidator(time_validator)
        self.horizontalLayout_4.addWidget(self.lineEdit_time)
        self.lineEdit_time.editingFinished.connect(self.update_properties)

        # spacer (widget time container)
        self.horizontalLayout_4.addItem(QSpacerItem(40, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.verticalLayout.addWidget(self.widget_time_container)

        # V spacer (widget_content)
        self.verticalLayout.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding))


        self.horizontalLayout.addWidget(self.widget_content)

        # H spacer main
        self.horizontalLayout.addItem(QSpacerItem(20, 0, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))

    def update_properties(self):
        self.properties_updated.emit(self.lineEdit_time.text())

class PropertiesLoop(QWidget):

    removalRequested = Signal()
    properties_updated = Signal(str)

    def __init__(self, repeats, parent=None):
        super().__init__(parent)
        self.repeats = repeats
        self.init_properties_key()

    def init_properties_key(self):

        self.resize(300, 300)
        self.setMinimumSize(QSize(300, 300))
        self.setMaximumWidth(300)

        self.horizontalLayout = QHBoxLayout(self)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)


        # H spacer main
        self.horizontalLayout.addItem(QSpacerItem(20, 20, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))

        self.widget_content = QWidget(self)
        self.verticalLayout = QVBoxLayout(self.widget_content)
        self.verticalLayout.setSpacing(10)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)

        self.verticalLayout.addItem(QSpacerItem(0, 10, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))

        # -------------- widget repeat number container --------------
        self.widget_repeat_number_container = QWidget(self.widget_content)
        self.widget_repeat_number_container.setMaximumSize(QSize(16777215, 50))
        self.horizontalLayout_4 = QHBoxLayout(self.widget_repeat_number_container)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)

        # label repeat number
        self.widget_label_repeat_number = QWidget(self.widget_repeat_number_container)
        self.widget_label_repeat_number.setFixedSize(QSize(80, 30))

        self.horizontalLayout_5 = QHBoxLayout(self.widget_label_repeat_number)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)

        self.label_time = QLabel("Repeats: ", self.widget_label_repeat_number)
        self.horizontalLayout_5.addWidget(self.label_time)

        # spacer (widget time container)
        self.horizontalLayout_5.addItem(QSpacerItem(40, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.horizontalLayout_4.addWidget(self.widget_label_repeat_number)

        # lineEdit repeat number
        
        self.lineEdit_repeat_number = QLineEdit(self.repeats, self.widget_repeat_number_container)
        self.lineEdit_repeat_number.setFixedSize(QSize(90, 30))
        self.lineEdit_repeat_number.setStyleSheet("background: #262626;")
        self.lineEdit_repeat_number.setValidator(repeat_number_validator)
        self.horizontalLayout_4.addWidget(self.lineEdit_repeat_number)
        self.lineEdit_repeat_number.editingFinished.connect(self.update_properties)

        # spacer (widget time container)
        self.horizontalLayout_4.addItem(QSpacerItem(40, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.verticalLayout.addWidget(self.widget_repeat_number_container)

        # V spacer (widget_content)
        self.verticalLayout.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding))


        self.horizontalLayout.addWidget(self.widget_content)

        # H spacer main
        self.horizontalLayout.addItem(QSpacerItem(20, 0, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))

    def update_properties(self):
        self.properties_updated.emit(self.lineEdit_repeat_number.text())

class TextEdit_Text(QTextEdit):
    properties_updated = Signal(str)

    def __init__(self, *args, **kwargs):
        super(TextEdit_Text, self).__init__(*args, **kwargs)

    def focusOutEvent(self, event):
        super(TextEdit_Text, self).focusOutEvent(event)
        user_text = self.toPlainText()
        self.properties_updated.emit(user_text)

class PropertiesText(QWidget):

    properties_updated = Signal(str)
    removalRequested = Signal()
    
    def __init__(self, text, parent=None):
        super().__init__(parent)
        self.text = text
        self.init_properties_key()

    def init_properties_key(self):

        self.resize(300, 300)
        self.setMaximumWidth(300)

        self.horizontalLayout = QHBoxLayout(self)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)


        # H spacer main
        self.horizontalLayout.addItem(QSpacerItem(20, 20, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))

        self.widget_content = QWidget(self)
        self.verticalLayout = QVBoxLayout(self.widget_content)
        self.verticalLayout.setSpacing(10)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)

        self.verticalLayout.addItem(QSpacerItem(0, 10, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))

        # -------------- widget textEdit text container --------------
        self.widget_repeat_number_container = QWidget(self.widget_content)
        self.horizontalLayout_4 = QHBoxLayout(self.widget_repeat_number_container)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)

        # textEdit text  
        self.textEdit_user_text = TextEdit_Text(self.text, self.widget_repeat_number_container)
        self.textEdit_user_text.properties_updated.connect(self.update_properties_text)
        self.textEdit_user_text.setFixedWidth(300)
        self.textEdit_user_text.setStyleSheet("background: #262626;")
        self.horizontalLayout_4.addWidget(self.textEdit_user_text)


        self.verticalLayout.addWidget(self.widget_repeat_number_container)

        # V spacer (widget_content)
        self.verticalLayout.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding))


        self.horizontalLayout.addWidget(self.widget_content)

        # H spacer main
        self.horizontalLayout.addItem(QSpacerItem(20, 0, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))

    def update_properties_text(self, user_text):
        self.properties_updated.emit(user_text)

class PropertiesMouseButton(QWidget):

    removalRequested = Signal()
    properties_updated = Signal(str, str)

    def __init__(self, time, key, parent=None):
        super().__init__(parent)
        self.time = time
        self.key = key
        self.init_properties_mouse_button()

    def init_properties_mouse_button(self):

        self.resize(300, 300)
        self.setMinimumSize(QSize(300, 300))
        self.setMaximumWidth(300)

        self.horizontalLayout = QHBoxLayout(self)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)


        # H spacer main
        self.horizontalLayout.addItem(QSpacerItem(20, 20, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))

        self.widget_content = QWidget(self)
        self.verticalLayout = QVBoxLayout(self.widget_content)
        self.verticalLayout.setSpacing(10)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)

        self.verticalLayout.addItem(QSpacerItem(0, 10, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))

        # -------------- widget time container --------------
        self.widget_time_container = QWidget(self.widget_content)
        self.widget_time_container.setMaximumSize(QSize(16777215, 50))
        self.horizontalLayout_4 = QHBoxLayout(self.widget_time_container)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)

        # label time
        self.widget_label_time = QWidget(self.widget_time_container)
        self.widget_label_time.setFixedSize(QSize(60, 30))

        self.horizontalLayout_5 = QHBoxLayout(self.widget_label_time)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)

        self.label_time = QLabel("Time: ", self.widget_label_time)
        self.horizontalLayout_5.addWidget(self.label_time)

        # spacer (widget time container)
        self.horizontalLayout_5.addItem(QSpacerItem(40, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.horizontalLayout_4.addWidget(self.widget_label_time)

        # lineEdit time
        
        self.lineEdit_time = QLineEdit(self.time, self.widget_time_container)
        self.lineEdit_time.setFixedSize(QSize(90, 30))
        self.lineEdit_time.setStyleSheet("background: #262626;")
        self.lineEdit_time.setValidator(time_validator)
        self.horizontalLayout_4.addWidget(self.lineEdit_time)
        self.lineEdit_time.editingFinished.connect(self.update_properties)

        # spacer (widget time container)
        self.horizontalLayout_4.addItem(QSpacerItem(40, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.verticalLayout.addWidget(self.widget_time_container)

        # V spacer (widget_content)
        self.verticalLayout.addItem(QSpacerItem(0, 10, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))

        #self.widget = QWidget(self.widget_content)
        #self.widget.setGeometry(QRect(0, 0, 400, 300))
        #self.widget.setContentsMargins(0, 0, 0, 0)

        self.buttonsverticalLayout_2 = QVBoxLayout(self)
        self.buttonsverticalLayout_2.setObjectName(u"verticalLayout_2")
        self.buttonsverticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.buttonshorizontalLayout_2 = QHBoxLayout()
        self.buttonshorizontalLayout_2.setObjectName(u"horizontalLayout_2")
        self.buttonshorizontalLayout_2.setContentsMargins(0, 0, 0, 0)

        self.buttonshorizontalLayout_2.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.mouse_button_3 = QPushButton("LMB", self)
        self.mouse_button_3.setFixedSize(QSize(50,50))
        self.mouse_button_3.setStyleSheet("background: #262626;")
        self.mouse_button_3.clicked.connect(lambda: self.set_key("LMB"))
        self.buttonshorizontalLayout_2.addWidget(self.mouse_button_3)

        self.buttonshorizontalLayout_2.addItem(QSpacerItem(10, 0, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))

        self.buttonsverticalLayout_4 = QVBoxLayout()
        self.buttonsverticalLayout_4.setObjectName(u"verticalLayout_4")
        self.buttonsverticalLayout_4.setContentsMargins(0, 0, 0, 0)

        self.mouse_button_1 = QPushButton("Wheel\nup", self)
        self.mouse_button_1.setFixedSize(QSize(50,50))
        self.mouse_button_1.setStyleSheet("background: #262626;")
        self.mouse_button_1.clicked.connect(lambda: self.set_key("WheelUp"))
        self.buttonsverticalLayout_4.addWidget(self.mouse_button_1)

        self.buttonsverticalLayout_4.addItem(QSpacerItem(0, 10, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))

        self.mouse_button_4 = QPushButton("MMB", self)
        self.mouse_button_4.setFixedSize(QSize(50,50))
        self.mouse_button_4.setStyleSheet("background: #262626;")
        self.mouse_button_4.clicked.connect(lambda: self.set_key("MMB"))
        self.buttonsverticalLayout_4.addWidget(self.mouse_button_4)

        self.buttonsverticalLayout_4.addItem(QSpacerItem(0, 10, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))

        self.mouse_button_2 = QPushButton("Wheel\ndown", self)
        self.mouse_button_2.setFixedSize(QSize(50,50))
        self.mouse_button_2.setStyleSheet("background: #262626;")
        self.mouse_button_2.clicked.connect(lambda: self.set_key("WheelDown"))
        self.buttonsverticalLayout_4.addWidget(self.mouse_button_2)


        self.buttonshorizontalLayout_2.addLayout(self.buttonsverticalLayout_4)

        self.buttonshorizontalLayout_2.addItem(QSpacerItem(10, 0, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))

        self.mouse_button_5 = QPushButton("RMB", self)
        self.mouse_button_5.setFixedSize(QSize(50,50))
        self.mouse_button_5.setStyleSheet("background: #262626;")
        self.mouse_button_5.clicked.connect(lambda: self.set_key("RMB"))
        self.buttonshorizontalLayout_2.addWidget(self.mouse_button_5)

        self.buttonshorizontalLayout_2.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.buttonsverticalLayout_2.addLayout(self.buttonshorizontalLayout_2)

        self.buttonsverticalLayout_2.addItem(QSpacerItem(0, 10, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))
        #########

        self.buttonshorizontalLayout = QHBoxLayout()
        self.buttonshorizontalLayout.setObjectName(u"horizontalLayout")
        self.buttonshorizontalLayout.setContentsMargins(0, 0, 0, 0)

        self.buttonshorizontalLayout.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.mouse_button_7 = QPushButton("MB4", self)
        self.mouse_button_7.setFixedSize(QSize(50,50))
        self.mouse_button_7.setStyleSheet("background: #262626;")
        self.mouse_button_7.clicked.connect(lambda: self.set_key("MB4"))
        self.buttonshorizontalLayout.addWidget(self.mouse_button_7)

        self.buttonshorizontalLayout.addItem(QSpacerItem(10, 0, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed))

        self.mouse_button_8 = QPushButton("MB5", self)
        self.mouse_button_8.setFixedSize(QSize(50,50))
        self.mouse_button_8.setStyleSheet("background: #262626;")
        self.mouse_button_8.clicked.connect(lambda: self.set_key("MB5"))
        self.buttonshorizontalLayout.addWidget(self.mouse_button_8)

        self.buttonshorizontalLayout.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        self.buttonsverticalLayout_2.addLayout(self.buttonshorizontalLayout)
        self.verticalLayout.addItem(self.buttonsverticalLayout_2)

        # V spacer (widget_content)
        self.verticalLayout.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding))


        self.horizontalLayout.addWidget(self.widget_content)

        # H spacer main
        self.horizontalLayout.addItem(QSpacerItem(20, 0, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))

    def set_key(self, user_key):
        self.key = user_key
        self.update_properties()

    def update_properties(self):
        self.properties_updated.emit(
            self.key,
            self.lineEdit_time.text())