# Partially generated by Qt Designer.
# Functions for data updates and widget removal have been added.

from PySide6.QtCore import QSize, Qt, Signal
from PySide6.QtWidgets import QHBoxLayout, QLabel, QPushButton, QSizePolicy, QSpacerItem, QWidget

class KeyListWidget(QWidget):

    removalRequested = Signal()

    def __init__(self, controller = None, key = "", time = "0", parent=None):
        super().__init__(parent)
        self.controller = controller
        self.key = key
        self.time = time
        self.init_key_list_widget()

    def init_key_list_widget(self):
        self.setObjectName("EventListWidget")
        self.setFixedSize(QSize(450, 50))
        self.setStyleSheet("font-size: 15pt;")

        # main layout
        self.main_widget = QHBoxLayout(self)
        self.main_widget.setSpacing(0)
        self.main_widget.setContentsMargins(0, 0, 0, 0)

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        # label time
        self.label_event_time = QLabel(self)
        self.label_event_time.setEnabled(False)
        self.label_event_time.setFixedWidth(70)
        self.label_event_time.setText(self.time)
        self.label_event_time.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.main_widget.addWidget(self.label_event_time)

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        # label key
        self.label_key = QLabel(self)
        self.label_key.setEnabled(False)
        self.label_key.setFixedWidth(40)
        self.label_key.setText("Key")
        self.label_key.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.main_widget.addWidget(self.label_key)

        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        # label event key
        self.label_event_key = QLabel(self)
        self.label_event_key.setEnabled(False)
        self.label_event_key.setFixedWidth(20)
        self.label_event_key.setText(self.key)
        self.label_event_key.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.main_widget.addWidget(self.label_event_key)
    
        # spacer (main)
        self.main_widget.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        # button options
        self.button_event_delete = QPushButton("", self)
        self.button_event_delete.setFixedSize(QSize(40, 40))
        self.button_event_delete.setStyleSheet("image: url(:/icons/icons/delete.svg);")
        self.button_event_delete.setIconSize(QSize(40, 40))
        self.button_event_delete.clicked.connect(self.removalRequested.emit)
        self.main_widget.addWidget(self.button_event_delete)

        # spacer (main)
        self.spacer4 = QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum)
        self.main_widget.addItem(self.spacer4)

    def update_key_and_time(self, user_key, user_time):
        self.key = user_key
        self.label_event_key.setText(self.key)
        self.time = user_time
        self.label_event_time.setText(self.time)
        self.controller.data_actions.save_to_file_and_event_list()
        self.controller.main_window.current_macro_header.update_time(self.controller.main_window.current_macro.total_time)

class WaitListWidget(QWidget):

    removalRequested = Signal()

    def __init__(self, controller = None, time = "0", parent=None):
        super().__init__(parent)
        self.controller = controller
        self.time = time
        self.init_wait_list_widget()

    def init_wait_list_widget(self):
        self.setObjectName("EventListWidget")
        self.setFixedSize(QSize(450, 50))
        self.setStyleSheet("font-size: 15pt;")

        # main layout
        self.main_widget = QHBoxLayout(self)
        self.main_widget.setSpacing(0)
        self.main_widget.setContentsMargins(0, 0, 0, 0)

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        # label time
        self.label_time = QLabel(self)
        self.label_time.setEnabled(False)
        self.label_time.setFixedWidth(70)
        self.label_time.setText(self.time)
        self.label_time.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.main_widget.addWidget(self.label_time)

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        # label wait
        self.label_wait = QLabel(self)
        self.label_wait.setEnabled(False)
        self.label_wait.setFixedWidth(40)
        self.label_wait.setText("Wait")
        self.label_wait.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.main_widget.addWidget(self.label_wait)
    
        # spacer (main)
        self.main_widget.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        # button options
        self.button_event_delete = QPushButton("", self)
        self.button_event_delete.setFixedSize(QSize(40, 40))
        self.button_event_delete.setStyleSheet("image: url(:/icons/icons/delete.svg);")
        self.button_event_delete.setIconSize(QSize(40, 40))
        self.button_event_delete.clicked.connect(self.removalRequested.emit)
        self.main_widget.addWidget(self.button_event_delete)

        # spacer (main)
        self.spacer4 = QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum)
        self.main_widget.addItem(self.spacer4)

    def update_time(self, user_time):
        self.time = user_time
        self.label_time.setText(self.time)

class TextListWidget(QWidget):

    removalRequested = Signal()

    def __init__(self, controller = None, text = "", parent=None):
        super().__init__(parent)
        self.controller = controller
        self.text = text
        self.init_text_list_widget()

    def init_text_list_widget(self):
        self.setObjectName("EventListWidget")
        self.setFixedSize(QSize(450, 50))
        self.setStyleSheet("font-size: 15pt;")

        # main layout
        self.main_widget = QHBoxLayout(self)
        self.main_widget.setSpacing(0)
        self.main_widget.setContentsMargins(0, 0, 0, 0)

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(90, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        # label type text
        self.label_time = QLabel(self)
        self.label_time.setEnabled(False)
        self.label_time.setFixedWidth(40)
        self.label_time.setText("Text")
        self.label_time.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.main_widget.addWidget(self.label_time)
    
        # spacer (main)
        self.main_widget.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        # button options
        self.button_event_delete = QPushButton("", self)
        self.button_event_delete.setFixedSize(QSize(40, 40))
        self.button_event_delete.setStyleSheet("image: url(:/icons/icons/delete.svg);")
        self.button_event_delete.setIconSize(QSize(40, 40))
        self.button_event_delete.clicked.connect(self.removalRequested.emit)
        self.main_widget.addWidget(self.button_event_delete)

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

    def update_text(self, user_text):
        self.text = user_text

class LoopListWidget(QWidget):
    __match_args__ = ("action",)

    removalRequested = Signal()

    def __init__(self, controller = None, loop_id = None, action = None, repeats = "", parent=None):
        super().__init__(parent)
        self.controller = controller
        self.repeats = repeats
        self.loop_id = loop_id
        self.action = action
        self.init_loop_list_widget()

    def init_loop_list_widget(self):
        self.setObjectName("EventListWidget")
        self.setFixedSize(QSize(450, 50))
        self.setStyleSheet("font-size: 15pt; color: #CCAAFF;")

        # main layout
        self.main_widget = QHBoxLayout(self)
        self.main_widget.setSpacing(0)
        self.main_widget.setContentsMargins(0, 0, 0, 0)

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        # label loop + ID
        self.label_loop = QLabel(self)
        self.label_loop.setEnabled(False)
        self.label_loop.setFixedWidth(60)
        self.label_loop.setText(f"Loop {self.loop_id}")
        self.label_loop.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.main_widget.addWidget(self.label_loop)

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        if self.action == "start":
            # label action
            self.label_action = QLabel(self)
            self.label_action.setEnabled(False)
            self.label_action.setFixedWidth(40)
            self.label_action.setText("Start")
            self.label_action.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.main_widget.addWidget(self.label_action)

            # spacer (main)
            self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

            # label repeat_number
            self.label_repeat_number = QLabel(self)
            self.label_repeat_number.setEnabled(False)
            self.label_repeat_number.setFixedWidth(20)
            self.label_repeat_number.setText(self.repeats)
            self.label_repeat_number.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.main_widget.addWidget(self.label_repeat_number)
        else:
            # label action
            self.label_action = QLabel(self)
            self.label_action.setEnabled(False)
            self.label_action.setFixedWidth(40)
            self.label_action.setText("Stop")
            self.label_action.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.main_widget.addWidget(self.label_action)
    
        # spacer (main)
        self.main_widget.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        # button options
        self.button_event_delete = QPushButton("", self)
        self.button_event_delete.setFixedSize(QSize(40, 40))
        self.button_event_delete.setStyleSheet("image: url(:/icons/icons/delete.svg);")
        self.button_event_delete.setIconSize(QSize(40, 40))
        self.button_event_delete.clicked.connect(self.removalRequested.emit)
        self.main_widget.addWidget(self.button_event_delete)

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

    def update_repeat_number(self, user_repeat_number):
        if self.action == "start":
            self.repeats = user_repeat_number
            self.label_repeat_number.setText(self.repeats)

class MouseButtonListWidget(QWidget):

    removalRequested = Signal()

    def __init__(self, controller = None, key = "", time = "0", parent=None):
        super().__init__(parent)
        self.controller = controller
        self.key = key
        self.time = time
        self.init_mouse_button_list_widget()

    def init_mouse_button_list_widget(self):
        self.setObjectName("EventListWidget")
        self.setFixedSize(QSize(450, 50))
        self.setStyleSheet("font-size: 15pt;")

        # main layout
        self.main_widget = QHBoxLayout(self)
        self.main_widget.setSpacing(0)
        self.main_widget.setContentsMargins(0, 0, 0, 0)

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        # label time
        self.label_event_time = QLabel(self)
        self.label_event_time.setEnabled(False)
        self.label_event_time.setFixedWidth(70)
        self.label_event_time.setText(self.time)
        self.label_event_time.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.main_widget.addWidget(self.label_event_time)

        # spacer (main)
        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        # label Mouse
        self.label_key = QLabel(self)
        self.label_key.setEnabled(False)
        self.label_key.setFixedWidth(60)
        self.label_key.setText("Mouse")
        self.label_key.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.main_widget.addWidget(self.label_key)

        self.main_widget.addItem(QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum))

        # label event key
        self.label_event_key = QLabel(self)
        self.label_event_key.setEnabled(False)
        self.label_event_key.setFixedWidth(120)
        self.label_event_key.setText(self.key)
        self.label_event_key.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.main_widget.addWidget(self.label_event_key)
    
        # spacer (main)
        self.main_widget.addItem(QSpacerItem(0, 0, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        # button options
        self.button_event_delete = QPushButton("", self)
        self.button_event_delete.setFixedSize(QSize(40, 40))
        self.button_event_delete.setStyleSheet("image: url(:/icons/icons/delete.svg);")
        self.button_event_delete.setIconSize(QSize(40, 40))
        self.button_event_delete.clicked.connect(self.removalRequested.emit)
        self.main_widget.addWidget(self.button_event_delete)

        # spacer (main)
        self.spacer4 = QSpacerItem(20, 0, QSizePolicy.Fixed, QSizePolicy.Minimum)
        self.main_widget.addItem(self.spacer4)

    def update_key_and_time(self, user_key, user_time):
        self.key = user_key
        self.label_event_key.setText(self.key)
        self.time = user_time
        self.label_event_time.setText(self.time)
        self.controller.data_actions.save_to_file_and_event_list()
        self.controller.main_window.current_macro_header.update_time(self.controller.main_window.current_macro.total_time)